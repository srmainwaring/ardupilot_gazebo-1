"""
Use Gazebo Python services to set and get parameters
"""

from google.protobuf import symbol_database
from google.protobuf.any_pb2 import Any

from gz.msgs11.double_pb2 import Double
from gz.msgs11.parameter_pb2 import Parameter
from gz.msgs11.parameter_error_pb2 import ParameterError
from gz.msgs11.parameter_name_pb2 import ParameterName
from gz.msgs11.parameter_value_pb2 import ParameterValue

from gz.transport14 import Node


class InvalidParameterError(Exception):
    pass


# unpack_any generated by Claude 3.5 Sonnet
# "Unpack a google.protobuf.any_pb2.Any using the type_url"
def unpack_any(any_msg):
    """Unpack a google.protobuf.Any message using its type_url.

    Args:
        any_msg: google.protobuf.Any message to unpack

    Returns:
        Unpacked protobuf message
    """
    # Extract the message type name from type_url
    # type_url format: "type.googleapis.com/package.MessageType"
    type_name = any_msg.type_url.split("/")[-1]

    # Get the global symbol database
    db = symbol_database.Default()

    try:
        # Look up the message class by its full name
        message_class = db.GetSymbol(type_name)
        # Create a new message instance
        message = message_class()
        # Unpack the Any message into it
        any_msg.Unpack(message)
        return message
    except KeyError:
        raise ValueError(f"Unknown message type: {type_name}")


def is_any_empty(any_msg):
    """Check if Any message is empty or null.

    Args:
        any_msg: google.protobuf.Any message to check

    Returns:
        bool: True if empty/null, False otherwise
    """
    # NOTE: do not check 'not any_msg.value' as this provides a false
    #       positive in the event the value has the default value.
    return any_msg is None or not any_msg.type_url


def get_param(registry, name, timeout_ms):
    """Get a parameter from a registry"""
    node = Node()
    service_name = f"{registry}/get_parameter"
    request = ParameterName()
    request.name = name
    response = ParameterValue()

    result, response = node.request(
        service_name, request, ParameterName, ParameterValue, timeout_ms
    )

    # Validate
    if not result:
        raise InvalidParameterError(
            f"Failed to get parameter [{name}] service call failed"
        )

    if is_any_empty(response.data):
        raise InvalidParameterError(f"Failed to get parameter [{name}] not declared")

    return unpack_any(response.data)


def set_param(registry, name, value, timeout_ms):
    """Set a (double) parameter from a registry"""
    node = Node()
    service_name = f"{registry}/set_parameter"
    double_msg = Double()
    double_msg.data = value
    request = Parameter()
    request.name = name
    request.value.Pack(double_msg)
    response = ParameterError()

    result, response = node.request(
        service_name, request, Parameter, ParameterError, timeout_ms
    )

    # Validate
    if not result:
        raise InvalidParameterError(
            f"Failed to set parameter [{name}] service call failed"
        )

    if response.data != ParameterError.SUCCESS:
        raise InvalidParameterError(f"Failed to set parameter [{name}] {response}")


def main():
    """Example demonstrating how to set and get dynamic parameters"""
    timeout_ms = 1000
    registry = "/world/servo"

    prefix = "ServoPlugin.servo.servo.servo_arm_joint."
    names = [
        "p_gain",
        "i_gain",
        "d_gain",
        "i_max",
        "i_min",
        "cmd_max",
        "cmd_min",
        "cmd_offset",
    ]

    # set params
    for i, name in enumerate(names):
        scopedName = prefix + name
        value = i * 0.1
        try:
            set_param(registry, scopedName, value, timeout_ms)
        except InvalidParameterError as ex:
            print(ex)
            # return

    # get params
    for name in names:
        scopedName = prefix + name
        try:
            value = get_param(registry, scopedName, timeout_ms)
            print(f"{name}: {value.data}")
        except InvalidParameterError as ex:
            print(ex)
            return


if __name__ == "__main__":
    main()
